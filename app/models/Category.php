<?php

use Illuminate\Support\MessageBag;

class Category extends BaseModel {
    use Traits\HasImage, Traits\CategoryTree, Traits\ToSelect;

    /**
     * The database collection
     *
     * @var string
     */
    protected $collection = 'categories';

    /**
     * Validation rules
     *
     * @var array
     */
    public static $rules = array(
        'name' => 'required',
    );

    /**
     * Attributes that will be generated by FactoryMuff
     */
    public static $factory = array(
        'name' => 'string',
        'parents' => array(),
        'shortDesc' => 'text',
        'description' => 'text',
        'template' => 'default',
        'productTemplate' => 'default'
    );

    protected $guarded = array(
        'image_file',
        '_id',
    );

    /**
     * Path where category images will be stored
     *
     * @var string
     */
    private $images_path = '../public/assets/img/categories';

    /**
     * Reference to parent
     */
    public function parents()
    {
        return $this->referencesMany('Category','parents');
    }

    /**
     * A full ancestors tree
     */
    public function ancestors()
    {
        return $this->embedsMany('Category','ancestors');
    }

    /**
     * Return all the childs. Use carefully.
     *
     */
    public function childs()
    {
        return Category::where(['parents'=>$this->_id]);
    }

    /**
     * Verify if the model is valid
     *
     * @return bool
     */
    public function isValid()
    {
        $valid = parent::isValid();

        if( $valid )
        {
            // does a category with the same name and with different _id exists?
            $exists = Category::where(['name'=>$this->name, '_id'=>['$ne'=>$this->_id]])->count();

            if( $exists )
            {
                $this->errors = new MessageBag(['JÃ¡ existe uma categoria com esse nome']);
                return false;
            }
            else
            {
                return true;
            }
        }

        return false;
    }

    /**
     * Save the model to the database if it's valid
     * Before saving, build ancestor tree
     *
     * @return bool
     */
    public function save()
    {

        if( $this->isValid() )
        {
            $this->buildAncestors();
            return parent::save();

            foreach ($this->childs() as $child) {
                $child->buildAncestors();
                $child->save();
            }
        }
        else
        {
            return false;
        }
    }

    public function buildAncestors()
    {
        unset($this->ancestors);
        if($this->parents())
        {
            $this->ancestors = $this->parents()->toArray();
        }
    }

}
